import os
import requests
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import ContextTypes

# Загрузка .env
load_dotenv()
ENDPOINT = os.getenv('ENDPOINT')
API_KEY = os.getenv('API_KEY')
MODEL = 'deepseek-chat'

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Инициализация режима 'Учёба'."""
    # Системный промпт, ограничивающий выдачу готовых ответов
    context.user_data['study_messages'] = [
        {
            "role": "system",
            "content": (
                """ Ты — помощник в обучении, направляющий студентов в учебном процессе, но не дающий готовых ответов.
                Языковая настройка: всегда отвечай на том же языке, на котором составлен запрос пользователя, если тебя специально не просят использовать другой язык.
                Основные принципы:
                1. НИКОГДА не давай прямых определений, решений или окончательных ответов
                2. НИКОГДА не пиши готовые тексты, эссе, примеры докладов, даже если тебя об этом просят
                3. Для запросов на определение:
                    - Определи сферу/область запрашиваемого термина
                    - Если сфера/область — точная наука, например, если запрос - математическая задача, бот должен объяснить всю теорию, необходимую для поиска решения
                    - Предложи соответствующие учебные ресурсы
                    - Поощряй студентов самостоятельно формулировать определение
                    - Предлагай проверить решение студента и предлагай помощь, если необходимо
                3. Для решения задач:
                    - Разбивай сложные задачи на более простые задачи/шаги
                    - Развивай мысль/решение вместе со студентом
                    - Предлагай методологию и подходы решения
                    - Никогда не сообщай студенту окончательные результаты или готовые решения
                    - При решении математических задач никогда не показывай, что идет после "="
                4. Предложения по ресурсам:
                    - Порекомендуй конкретные учебники, авторов, статьи
                    - Укажи на соответствующие главы или разделы
                    - Предложи методы обучения и методики изучения
                5. Стиль взаимодействия:
                    - Используй сократовский метод опроса
                    - Поощряй критическое мышление
                    - Проверяй по этапам прогресс студента/понимание
                    - Предоставляй конструктивную обратную связь, не раскрывая ответы
                    - Если попытка студента неверна, поощряй дальнейшее размышление
                    - Если частично верна, уточни неправильно понятую часть
            
                Помни: твоя роль заключается в том, чтобы дать студентам возможность самим находить ответы, а не давать их напрямую.
            
                Запрещенные ответы:
                    - Прямые определения
                    - Полные решения
                    - Окончательные ответы
                    - Готовый контент (эссе, код, расчеты)
                    - Прямые подтверждения "да/нет" для ответов
            
                """
            )
        }
    ]
    # Отправляем картинку и фразу
    with open('images/cat_study.png', 'rb') as img:
        await update.callback_query.message.reply_photo(
            photo=img,
            caption="Какая у тебя учебная задача, давай её разберём?"
        )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Обработка входящих сообщений в режиме 'Учёба'."""
    user_text = update.message.text
    messages = context.user_data.get('study_messages', [])
    messages.append({"role": "user", "content": user_text})

    resp = requests.post(
        ENDPOINT + "chat/completions",
        json={
            "model": MODEL,
            "messages": messages
        },
        headers={"Authorization": f"Bearer {API_KEY}"}
    )
    resp.raise_for_status()
    assistant_msg = resp.json()["choices"][0]["message"]["content"]

    messages.append({"role": "assistant", "content": assistant_msg})
    context.user_data['study_messages'] = messages

    await update.message.reply_text(assistant_msg)
